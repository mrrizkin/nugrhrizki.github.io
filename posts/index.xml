<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rizki Nugraha</title>
    <link>https://nugrhrizki.github.io/posts/</link>
    <description>Recent content in Posts on Rizki Nugraha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Sun, 29 Aug 2021 22:14:38 +0700</lastBuildDate><atom:link href="https://nugrhrizki.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Type Checking Against Custom Type on Typescript</title>
      <link>https://nugrhrizki.github.io/posts/type-checking-against-custom-type-typescript/</link>
      <pubDate>Sun, 29 Aug 2021 22:14:38 +0700</pubDate>
      
      <guid>https://nugrhrizki.github.io/posts/type-checking-against-custom-type-typescript/</guid>
      <description>NOTE!: There are many solutions to this problem. but this is my approach to solve the problem i&amp;rsquo;m facing
 The Problem type StringType = { baz: string; } type ObjectType = { foo: string; bar: number; } type MyType = ObjectType | StringType const MyFunction = (x: MyType): string =&amp;gt; { x.foo; // typescript error  x.bar; // typescript error  x.baz; // typescript error  return &amp;#34;&amp;#34; } My Solution type TypeIdentifier = &amp;#34;STRINGTYPE&amp;#34; | &amp;#34;OBJECTTYPE&amp;#34;; type StringType = { typeIdentifier: TypeIdentifier baz: string; } type ObjectType = { typeIdentifier: TypeIdentifier foo: string; bar: number; } type MyType = ObjectType | StringType; const MyFunction = (x: MyType): string | null =&amp;gt; { switch(x.</description>
    </item>
    
    <item>
      <title>JavaScript: the weird part</title>
      <link>https://nugrhrizki.github.io/posts/javascript-the-weird-part/</link>
      <pubDate>Sat, 28 Aug 2021 19:48:07 +0700</pubDate>
      
      <guid>https://nugrhrizki.github.io/posts/javascript-the-weird-part/</guid>
      <description>I keep a little list of these by my desk for my own sick amusement (which is something that my pal oxguin reckons is not a fact to be shared out loud). If you like this little lot, then you would probably enjoy some of the prior art at wtfjs.
Comparison craziness Letâ€™s start by making x an array with 0 in it.
var x = [0] // [0] It should equal itself, which is good.</description>
    </item>
    
  </channel>
</rss>
