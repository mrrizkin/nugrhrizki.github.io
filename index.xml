<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rizki Nugraha</title>
    <link>https://nugrhrizki.github.io/</link>
    <description>Recent content on Rizki Nugraha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>MIT</copyright>
    <lastBuildDate>Thu, 02 Sep 2021 18:39:19 +0700</lastBuildDate>
    
        <atom:link href="https://nugrhrizki.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Memoization: What, Why, and How</title>
        <link>https://nugrhrizki.github.io/posts/memoization-what-why-and-how/</link>
        <pubDate>Thu, 02 Sep 2021 18:39:19 +0700</pubDate>
        
        <guid>https://nugrhrizki.github.io/posts/memoization-what-why-and-how/</guid>
        <description>Rizki Nugraha https://nugrhrizki.github.io/posts/memoization-what-why-and-how/ -&lt;p&gt;Recently, I spent an hour with one of my protégés demonstrating some common advanced techniques we use at Webflow. One of the techniques I showed them was memoization. Let&amp;rsquo;s learn what memoization is, why you might use it, and how do we write it from scratch.&lt;/p&gt;
&lt;h1 id=&#34;what-is-memoization&#34;&gt;What is Memoization?&lt;/h1&gt;
&lt;p&gt;Memoization is a technique that enhances a function by creating and using a &lt;code&gt;cache&lt;/code&gt; to store and retrieve results of that function. Memoization uses the arguments of a function to create a &lt;code&gt;key&lt;/code&gt; for the &lt;code&gt;cache&lt;/code&gt;. The first time a memoized function is called with a set of arguments, those arguments are turned into a &lt;code&gt;key&lt;/code&gt; and the result of the function is stored as the value for that &lt;code&gt;key&lt;/code&gt; in the &lt;code&gt;cache&lt;/code&gt;. Then, on subsequent calls of the function with the same arguments, we can retrieve that previously calculated value from the &lt;code&gt;cache&lt;/code&gt; and return it before we ever do the work of calculating the result. This improves the performance of our function, since hitting the &lt;code&gt;cache&lt;/code&gt; is a constant time operation (&lt;code&gt;O(1)&lt;/code&gt; in big O notation).&lt;/p&gt;
&lt;h1 id=&#34;how-to-implement-memoization&#34;&gt;How to implement Memoization?&lt;/h1&gt;
&lt;p&gt;We can use memoization on any pure function and it&amp;rsquo;s not too difficult to implement either. Let&amp;rsquo;s create a higher order function that will allow us to create a memoized version of a pure function.&lt;/p&gt;
&lt;p&gt;Typically, we want to use memoization on functions with expensive calculations and we&amp;rsquo;ll talk about why later, but for the sake of writing our memoize function, I&amp;rsquo;m going to use a very simple pure function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;function&lt;/span&gt; add(x, y) {
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; x + y
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can&amp;rsquo;t get much simpler than an &lt;code&gt;add&lt;/code&gt; function! Since it&amp;rsquo;s a pure function, we can guarantee that the same inputs always lead to the same output. So if we&amp;rsquo;re able to create a cache that will use the function arguments as a key and store the results of the function as a value, we can retrieve that value from the cache knowing it&amp;rsquo;s the same as the result of running the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;function&lt;/span&gt; memoize(fn) {
	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// We create a cache inside the closure of the `memoize` function
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// This creates a new cache for each function we pass
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// to `memoize`. We&amp;#39;ll discuss other cache strategies later
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; cache = {}

	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// The goal is to return a function with an identical
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// signature as the one passed in
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; (...args) =&amp;gt; {
		&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// We need to create a key for our cache. A simple way to do this is
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// to join the args with a delimiter that clearly separates arguments
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// This way the arguments (12, 3) don&amp;#39;t create the same key as (1, 23)
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; key = args.map(JSON.stringify).join(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;---&amp;#39;&lt;/span&gt;)

		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (cache[key] !== &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;undefined&lt;/span&gt;) {
			&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Just for our example, let&amp;#39;s make it clear we returned a value
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// from the cache
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;			console.log(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#39;from cache&amp;#39;&lt;/span&gt;)
			&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; cache[key]
		}

		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; result = fn(...args)
		cache[key] = result

		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; result
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s break that down. &lt;code&gt;memoize&lt;/code&gt; receives a function as an argument. It then creates a cache in closure. This will store the results of our function in memory to be retrieved later.&lt;/p&gt;
&lt;p&gt;Next, we return a function that can receive whatever &lt;code&gt;args&lt;/code&gt; the original function receives. Inside of the function we are returning, we create a &lt;code&gt;key&lt;/code&gt; for our cache. In this case, I chose to stringify and join the arguments with a delimiter. This delimiter prevents similar arguments from accidentally being the same &lt;code&gt;key&lt;/code&gt;. Without a delimiter, calling &lt;code&gt;add(2, 34)&lt;/code&gt; and &lt;code&gt;add(23, 4)&lt;/code&gt; would result in the &lt;code&gt;key&lt;/code&gt; &lt;code&gt;234&lt;/code&gt;. We would end up with a mistaken cache hit for the second call, and even worse, our result would be incorrect.&lt;/p&gt;
&lt;p&gt;Next, if there is a defined value at the &lt;code&gt;cache[key]&lt;/code&gt;, we return it and skip calculating the result. Otherwise, we calculate the &lt;code&gt;result&lt;/code&gt;, store it in the &lt;code&gt;cache&lt;/code&gt;, and then return it.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s create a memoized &lt;code&gt;add&lt;/code&gt; function and use it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; memoizedAdd = memoize(add)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Seriously. Adding memoization to a pure function is that simple.&lt;/p&gt;
&lt;h1 id=&#34;why-use-memoization&#34;&gt;Why Use Memoization?&lt;/h1&gt;
&lt;p&gt;Memoization is a tradeoff exchanging space (memory) for time. The purpose of this tradeoff is to gain a performance benefit by skipping the calculation of the function&amp;rsquo;s result, i.e. save time. Thus, it only makes sense to use memoization where memory is not a concern and the original calculation is both expensive and often called with the same arguments. Our &lt;code&gt;add&lt;/code&gt; function was a bad example. It&amp;rsquo;s not an expensive calculation at all. Let&amp;rsquo;s create a slightly better example.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used this example before in my writing, but a &lt;code&gt;factorial&lt;/code&gt; function might be a good candidate for memoization. It&amp;rsquo;s recursive, which means that &lt;code&gt;factorial&lt;/code&gt; will be called with the same argument frequently. In fact, if it&amp;rsquo;s ever been called with a number greater than the current argument, it will simply return the value from the cache, since it&amp;rsquo;s already been calculated before. Let&amp;rsquo;s write the factorial function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; factorial = memoize((n) =&amp;gt; {
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (n === &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;) {
		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;
	}

	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; n * factorial(n - &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt;)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Memoization is a trade off of space for time. It&amp;rsquo;s used to cache the result of a function so that the next time it&amp;rsquo;s called with the same arguments, we can just return the answer. We don&amp;rsquo;t need to calculate it again. This technique is useful when we have an expensive calculation that will be called frequently with the same arguments. It&amp;rsquo;s used more often than you might realize and is a useful tool to have in your tool belt.&lt;/p&gt;
- https://nugrhrizki.github.io/posts/memoization-what-why-and-how/ - MIT</description>
        </item>
    
    
    
        <item>
        <title>The Power of 10: Rules for Developing Safety-Critical Code</title>
        <link>https://nugrhrizki.github.io/posts/the-power-of-10-rules-for-developing-safety-critical-code/</link>
        <pubDate>Mon, 30 Aug 2021 13:47:06 +0700</pubDate>
        
        <guid>https://nugrhrizki.github.io/posts/the-power-of-10-rules-for-developing-safety-critical-code/</guid>
        <description>Rizki Nugraha https://nugrhrizki.github.io/posts/the-power-of-10-rules-for-developing-safety-critical-code/ -&lt;p&gt;The Power of 10 Rules were created in 2006 by &lt;a href=&#34;https://en.wikipedia.org/wiki/Gerard_J._Holzmann&#34;&gt;Gerard J. Holzmann&lt;/a&gt; of the &lt;a href=&#34;https://en.wikipedia.org/wiki/JPL&#34;&gt;NASA/JPL&lt;/a&gt; Laboratory for Reliable Software.
The rules are intended to eliminate certain C coding practices which make code difficult to review or statically analyze.
These rules are a complement to the &lt;a href=&#34;https://en.wikipedia.org/wiki/MISRA_C&#34;&gt;MISRA C&lt;/a&gt; guidelines and have been incorporated into the greater set of JPL &lt;a href=&#34;https://en.wikipedia.org/wiki/Coding_conventions&#34;&gt;coding standards&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;rules&#34;&gt;Rules&lt;/h1&gt;
&lt;p&gt;the ten rules are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Avoid complex flow constructs, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Goto&#34;&gt;goto&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Recursion_(computer_science)&#34;&gt;recursion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All loops must have fixed bounds. This prevents runaway code.&lt;/li&gt;
&lt;li&gt;Avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_management#DYNAMIC&#34;&gt;heap memory allocation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Restrict functions to a single printed page.&lt;/li&gt;
&lt;li&gt;Use a minimum of two &lt;a href=&#34;https://en.wikipedia.org/wiki/Assertion_(software_development)#Assertions_for_run-time_checking&#34;&gt;runtime assertions&lt;/a&gt; per function.&lt;/li&gt;
&lt;li&gt;Restrict the scope of data to the smallest possible.&lt;/li&gt;
&lt;li&gt;Check the return value of all non-void functions, or cast to void to indicate the return value is useless.&lt;/li&gt;
&lt;li&gt;Use the &lt;a href=&#34;https://en.wikipedia.org/wiki/Preprocessor&#34;&gt;preprocessor&lt;/a&gt; sparingly.&lt;/li&gt;
&lt;li&gt;Limit pointer use to a single &lt;a href=&#34;https://en.wikipedia.org/wiki/Dereference_operator&#34;&gt;dereference&lt;/a&gt;, and do not use &lt;a href=&#34;https://en.wikipedia.org/wiki/Function_pointer&#34;&gt;function pointers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Compile with all possible warnings active; all warnings should then be addressed before release of the software.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code&#34;&gt;Wikipedia page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web.eecs.umich.edu/~imarkov/10rules.pdf&#34;&gt;The Power of 10: Rules for Developing Safety-Critical Code&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://nugrhrizki.github.io/posts/the-power-of-10-rules-for-developing-safety-critical-code/ - MIT</description>
        </item>
    
    
    
        <item>
        <title>Type Checking Against Custom Type on Typescript</title>
        <link>https://nugrhrizki.github.io/posts/type-checking-against-custom-type-typescript/</link>
        <pubDate>Sun, 29 Aug 2021 22:14:38 +0700</pubDate>
        
        <guid>https://nugrhrizki.github.io/posts/type-checking-against-custom-type-typescript/</guid>
        <description>Rizki Nugraha https://nugrhrizki.github.io/posts/type-checking-against-custom-type-typescript/ -&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt;: There are many solutions to this problem. but this is my approach to solve the problem i&amp;rsquo;m facing&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; StringType = {
  baz: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; ObjectType = {
  foo: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;;
  bar: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;number&lt;/span&gt;;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; MyType = ObjectType | StringType

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; MyFunction = (x: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;MyType&lt;/span&gt;): &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; =&amp;gt; {
  x.foo; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// typescript error
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  x.bar; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// typescript error
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  x.baz; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// typescript error
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;  
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;my-solution&#34;&gt;My Solution&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; TypeIdentifier = &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;STRINGTYPE&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;OBJECTTYPE&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; StringType = {
  typeIdentifier: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;TypeIdentifier&lt;/span&gt;
  baz: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; ObjectType = {
  typeIdentifier: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;TypeIdentifier&lt;/span&gt;
  foo: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;;
  bar: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;number&lt;/span&gt;;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; MyType = ObjectType | StringType;

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; MyFunction = (x: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;MyType&lt;/span&gt;): &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; | &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;null&lt;/span&gt; =&amp;gt; {
  &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;switch&lt;/span&gt;(x.typeIdentifier) {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;STRINGTYPE&amp;#34;&lt;/span&gt;:
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; y = x &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt; StringType;
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; y.baz;
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;OBJECTTYPE&amp;#34;&lt;/span&gt;:
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; y = x &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;as&lt;/span&gt; ObjectType;
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; y.foo;
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;default&lt;/span&gt;:
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;null&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;what about type guard with &lt;code&gt;is&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;yes type guard is cool, but I read &lt;a href=&#34;https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0#5da7&#34;&gt;this article&lt;/a&gt; about type checking with &lt;code&gt;is&lt;/code&gt;
and on the bottom of the article said
&lt;strong&gt;Warning: a type guard can introduce errors&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;therefore I prefer this method because it is more explicit&lt;/p&gt;
- https://nugrhrizki.github.io/posts/type-checking-against-custom-type-typescript/ - MIT</description>
        </item>
    
    
    
        <item>
        <title>JavaScript: the weird part</title>
        <link>https://nugrhrizki.github.io/posts/javascript-the-weird-part/</link>
        <pubDate>Sat, 28 Aug 2021 19:48:07 +0700</pubDate>
        
        <guid>https://nugrhrizki.github.io/posts/javascript-the-weird-part/</guid>
        <description>Rizki Nugraha https://nugrhrizki.github.io/posts/javascript-the-weird-part/ -&lt;p&gt;I keep a little list of these by my desk for my own sick amusement (which is something that my pal oxguin reckons is not a fact to be shared out loud). If you like this little lot, then you would probably enjoy some of the prior art at wtfjs.&lt;/p&gt;
&lt;h1 id=&#34;comparison-craziness&#34;&gt;Comparison craziness&lt;/h1&gt;
&lt;p&gt;Let’s start by making x an array with 0 in it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt; x = [&lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// [0]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It should equal itself, which is good.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;x == x &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it also equals not itself, which is not so good.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;x == !x &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What about comparing a 3 element array and a string?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#24909d&#34;&gt;Array&lt;/span&gt;(&lt;span style=&#34;color:#3677a9&#34;&gt;3&lt;/span&gt;) == &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;,,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ri-iight.&lt;/p&gt;
&lt;h1 id=&#34;type-twattery&#34;&gt;Type twattery&lt;/h1&gt;
&lt;p&gt;The type of not a number is, well, a number. Sensible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;NaN&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// &amp;#34;number&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well at least that means it ought to be equal to itself, right?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;NaN&lt;/span&gt; == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;NaN&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So much for NaN. I wonder what the type of null is …&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// &amp;#34;object&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;… but of course it is not actually an instanceof Object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, what is a string then?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Uh-huh.&lt;/p&gt;
&lt;h1 id=&#34;bounds-buffoonery&#34;&gt;Bounds buffoonery&lt;/h1&gt;
&lt;p&gt;How about a really big number first of all. Wait. What?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;9999999999999999&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 10000000000000000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hopefully small numbers make more sense.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#3677a9&#34;&gt;0.1&lt;/span&gt; + &lt;span style=&#34;color:#3677a9&#34;&gt;0.2&lt;/span&gt; == &lt;span style=&#34;color:#3677a9&#34;&gt;0.3&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I guess not. I bet that max is still bigger than min though.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#24909d&#34;&gt;Math&lt;/span&gt;.max() &amp;gt; &lt;span style=&#34;color:#24909d&#34;&gt;Math&lt;/span&gt;.min() &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#24909d&#34;&gt;Math&lt;/span&gt;.max() &amp;lt; &lt;span style=&#34;color:#24909d&#34;&gt;Math&lt;/span&gt;.min()  &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Maybe not.&lt;/p&gt;
&lt;h1 id=&#34;array-assinity&#34;&gt;Array assinity&lt;/h1&gt;
&lt;p&gt;Calling + on an empty array and an empty array gives the empty string. Who knew?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;[] + [] &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// &amp;#34;&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How about an empty array and an empty object?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;[] + {} &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// &amp;#34;[object Object]&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An empty object and an empty array gives, ummm, 0.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{} + [] &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whereas an empty object and an empty object is not a number. Which is true, I suppose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{} + {} &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// NaN
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;boolean-balderdash&#34;&gt;Boolean balderdash&lt;/h1&gt;
&lt;p&gt;I’ve heard of that boolean arithmetic. Let’s give it a try.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt; + &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt; === &lt;span style=&#34;color:#3677a9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt; - &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt; === &lt;span style=&#34;color:#3677a9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// true
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ah. It looks like true is equal to one. I’ll just check.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt; === &lt;span style=&#34;color:#3677a9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Doh!&lt;/p&gt;
&lt;h1 id=&#34;and-one-for-luck&#34;&gt;And one for luck&lt;/h1&gt;
&lt;p&gt;See if you can work out what this will evaluate to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;(! + [] + [] + ![]).length &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wow! Thanks for reading this far. Got any favourite weird parts of Javascript? Share them in the comments.&lt;/p&gt;
&lt;p&gt;Incidentally, these were all evaluated on spidermonkey 24.2.0. Maybe they won’t work in node/whatever other js engine you are using…&lt;/p&gt;
- https://nugrhrizki.github.io/posts/javascript-the-weird-part/ - MIT</description>
        </item>
    
    
  </channel>
</rss> 